/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example.demo;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.*;
import com.example.demo.Commands.ComandConfig;
import com.example.demo.Commands.ICommandConfig;



public class App {

    // Initialize repositories


    // Initialize services
   // private final GreetingService greetingService = new GreetingService(greetingRepository);

    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1) {
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                // Execute the commands
                new App().run(file_commands);
                // deleteExtraSpace();

            } catch (IOException e) {
                e.printStackTrace();
            }

            return;
        }

        // OR
        // Test your code by ading commands in this list
        List<String> inplace_commands = new LinkedList<>() {
            {
                add("CREATE_GREETING,Hello World!");
                add("CREATE_GREETING,Bye World!");
                add("LIST_GREETING");
                add("GET_GREETING,1");
            }
        };

        new App().run(inplace_commands);

    }


    public void run(List<String> commands) {

        // System.out.println(commands);

        ICommandConfig commandConfig = new ComandConfig();


        Iterator<String> it = commands.iterator();
        while (it.hasNext()) {
            String line = it.next();
            if (line.equals("") || line == null) {
                break;
            }
            List<String> tokens = Arrays.asList(line.split(","));

            try {
                switch (tokens.get(0)) {
                    case "REGISTER_PLAYER":
                        commandConfig.REGISTER_PLAYER(tokens);
                        break;
                    case "REGISTER_TEAM":
                        commandConfig.REGISTER_TEAM(tokens);
                        break;
                    case "START_AUCTION":
                         commandConfig.START_AUCTION(tokens);
                        break;
                    case "BID_PLAYER":
                         commandConfig.BID_PLAYER(tokens);
                        break;
                    case "CLOSE_AUCTION":
                        commandConfig.CLOSE_AUCTION(tokens);
                        break;
                    case "TEAM_OVERVIEW":
                        commandConfig.TEAM_OVERVIEW(tokens);
                        break;
                    case "PLAYER_OVERVIEW":
                        commandConfig.PLAYER_OVERVIEW(tokens);
                        break;
                    // Add More case statements below to support other commands

                    default:
                        throw new RuntimeException("INVALID_COMMAND");
                }
                // deleteExtraSpace();
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        }  
    } 
}

